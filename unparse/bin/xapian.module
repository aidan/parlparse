<?php
# vim:set filetype=php:
# vim:sw=2:ts=2:et:nowrap

/**
 * This drupal module links drupal and the result of a xapian search.  
 * The main point of it is to provide the xapian_do_search() function.  
 * I've also added some settings, to make it a bit more pluggable.
 */


/**
 * Implementation of hook_help().
 */
function xapian_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Provides options to display content from xapian in drupal, as a node.');
  }
}

/**
 * Implementation of hook_menu().
 */
function xapian_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/xapian',
      'title' => t('xapian settings'),
      'access' => user_access('administer xapian'),   
      'callback' => 'xapian_settings'
     );
     $items[] = array(
      'path' => 'admin/settings/xapian/settings',
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => '-10',
     );

     $items[] = array(
      'path' => 'admin/settings/xapian/test',
      'title' => t('Databse test'),
      'access' => user_access('administer xapian'),
      'type' => MENU_LOCAL_TASK,
      'callback' => 'xapian_dbtest'
     );
  }
  return $items;
}


/**
 *  Module functions
 */
 
function xapian_settings() {

  $form['dbpath'] = array(
    '#type' => textfield,
    '#title' => 'Path to database',
    '#default_value' => variable_get('xapian_dbpath', '/path/to/database.db'),
  );

  $form['submit'] = array(
    '#type' => submit,
    '#title' => 'Save',
    '#value' => 'Save',
  );
  return drupal_get_form('xapain_settings', $form);
} 

function xapain_settings_submit($form_id, $form) {
  variable_set('xapian_dbpath', $form['dbpath']);
}

function xapian_dbtest() {

  $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE, 
  );

  $form['search']['word'] = array(
    '#type' => textfield,
    '#title' => 'Search',
    '#default_value' => arg(4),
  );

  $form['search']['submit'] = array(
    '#type' => submit,
    '#title' => 'Search',
    '#value' => 'Search',
  );

  if (arg(4)) {
    $form['result'] = array(
      '#value' => "<h2>results</h2>",
    );

    $form['result_content'] = array(
      '#value' => xapian_do_search(variable_get('xapian_dbpath', '/path/to/database.db'), arg(4)),
    );

  }

  return drupal_get_form('xapain_search_test', $form);
 
}


function xapain_search_test_submit($form_id, $form) {
  return 'admin/settings/xapian/test/' . $form['word'];
}


/**
 * This is the main search function, that tries to copy xapque.py
 */

function xapian_do_search($undata_path, $db_path, $query) {
  if (!$undata_path) {
    // XXX what should we call this parameter? is location of undata directory
    $undata_path = variable_get('undata_path', '/path/to/undata');
  }
  $undata_path .= "/";
  if (!$db_path) {
    $db_path = variable_get('xapian_dbpath', 'path/to/database.db');
  }
  $db_path = $undata_path . $db_path;

  // XXX this doesn't break well if it can't find the database
  $database = new_Database($db_path);

  $enquire = new_Enquire($database);
  $stemmer = new_Stem("english");
  // XXX this for my testing when not in drupal as don't have "arg()".
  // However, not sure what the $query parameters was for anyone when
  // running under Drupal?
  if ($query) { 
    $terms = $query;
  } else {
    $terms = arg(4);
  }

  $queryparser = new_queryparser();
  queryparser_set_stemming_strategy($queryparser, QueryParser_STEM_NONE);
  queryparser_set_default_op($queryparser, Query_OP_AND);

  queryparser_add_prefix($queryparser, "class", "C");
  queryparser_add_prefix($queryparser, "id", "I");
  queryparser_add_prefix($queryparser, "subid", "J");
  queryparser_add_prefix($queryparser, "class", "C");
  queryparser_add_prefix($queryparser, "name", "S");
  queryparser_add_prefix($queryparser, "nation", "N");
  queryparser_add_prefix($queryparser, "language", "L");
  queryparser_add_prefix($queryparser, "document", "D");
  queryparser_add_prefix($queryparser, "reference", "R");
  queryparser_add_prefix($queryparser, "date", "E");
  queryparser_add_prefix($queryparser, "heading", "H");

  $query = queryparser_parse_query($queryparser, $terms);

  enquire_set_query($enquire, $query);

  # XXX for actual searches will want to sort by relevance instead, or fancier
  # things like set_sort_by_value_then_relevance
  enquire_set_sort_by_value($enquire, 0, false); // false for order forwards in date/time


  # XXX will want more than 100 here! See mset_get_matches_estimated in
  # searchengine.php from TWFY for code to work out set result sizes
  $matches = Enquire_get_mset($enquire, 0, 100); 

  $results .= Query_get_description($query) . "<br />\n";

  $mseti = MSet_begin($matches);
  while (! MSetIterator_equals($mseti, MSet_end($matches))) {
      // Extract XML from the disk file
      $doc_data = Document_get_data(MSetIterator_get_document($mseti));
      // print Document_get_value(MSetIterator_get_document($mseti), 0); # first sorting value
      list($doc_file, $doc_offset, $doc_len) = split("\|", $doc_data);
      $doc_file_full = $undata_path . $doc_file;
      $h = fopen($doc_file_full, 'r') or die("xapian.module couldn't find $doc_file_full");
      fseek($h, $doc_offset);
      $doc_content = fread($h, $doc_len);

      // Debug display of results
      $results .= "ID " . MSetIterator_get_docid($mseti) . " " .
        MSetIterator_get_percent($mseti) . "% [" .
        $doc_data . "]<br />" .
        "<pre>" . $doc_content . "</pre><br />" . # XXX uncomment to print Julian's structured HTML
        "\n";

      // Next result
      MSetIterator_next($mseti);
  }
  return $results;


}

