<?php
# vim:set filetype=php:
# vim:sw=2:ts=2:et:nowrap

/**
 * This drupal module links drupal and the result of a xapian search.  
 * The main point of it is to provide the xapian_do_search() function.  
 */


function xapian_do_search($query, $undata_path = NULL, $db_path = NULL) {

  if (!$db_path) {
    $db_path = "/home/undemocracy/undata/xapdex.db/";
  }
  
  if (!$undata_path) {
    // XXX what should we call this parameter? is location of undata directory
    $undata_path = "/home/undemocracy/undata/html/";
  }
  if (substr($undata_path, -1, 1) != '/') {
    $undata_path .= "/";
  }
  
  $db_path = $undata_path . $db_path;
  if (file_exists('xapian_php5.php')) {  
    include_once('xapian_php5.php' );
  }
  // XXX this doesn't break well if it can't find the database
  $database = new XapianDatabase($db_path);  

  $enquire = new XapianEnquire($database);
  $stemmer = new XapianStem("english");
  ``
  // XXX this for my testing when not in drupal as don't have "arg()".
  // However, not sure what the $query parameters was for anyone when
  // running under Drupal?
  if ($query) { 
    $terms = $query;
  } else {
    $terms = arg(4);
  }

  $queryparser = new Xapianqueryparser();
  $queryparser->set_stemming_strategy(QueryParser_STEM_NONE);
  $queryparser->set_default_op(Query_OP_AND);

  $queryparser->add_boolean_prefix("class", "C");
  $queryparser->add_boolean_prefix("id", "I");
  $queryparser->add_boolean_prefix("subid", "J");
  $queryparser->add_boolean_prefix("class", "C");
  $queryparser->add_boolean_prefix("name", "S");
  $queryparser->add_boolean_prefix("nation", "N");
  $queryparser->add_boolean_prefix("language", "L");
  $queryparser->add_boolean_prefix("document", "D");
  $queryparser->add_boolean_prefix("reference", "R");
  $queryparser->add_boolean_prefix("date", "E");
  $queryparser->add_boolean_prefix("heading", "H");

  $query = $queryparser->parse_query($terms);

  $enquire->set_query($query);

  # XXX for actual searches will want to sort by relevance instead, or fancier
  # things like set_sort_by_value_then_relevance
  $enquire->set_sort_by_value(0, false); // false for order forwards in date/time


  # XXX will want more than 100 here! See mset_get_matches_estimated in
  # searchengine.php from TWFY for code to work out set result sizes
  # And Olly says "I suspect you might want to look at the "check_at_least" parameter to
  # Enquire::get_mset()..."
  $matches = $enquire->get_mset(0, 100); 

  $result->info = $query->get_description();
  $mseti = $matches->begin();
  while (! $mseti->equals($matches->end())) {  
    $doc = $mseti->get_document();
    $doc_data = $doc->get_data();
    list($doc_file, $doc_offset, $doc_len) = split("\|", $doc_data);
    $result->data[] = array('file' => $doc_file, 'offset' => $doc_offset, 'len' => $doc_len);
    // Next result
    $mseti->next();
  }
  return $result;
}
