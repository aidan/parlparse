<?php
# vim:set filetype=php:
# vim:sw=2:ts=2:et


/**
 * Format the path to a file, based on the document id
 */
function un_get_doc_path($id = null) {
	if ($id) {
  $path = undata_path();
  $path = $path . "html/" . $id . ".html";
  return $path;
  }
}

/**
 * The path to the undata folder
 */
function undata_path() {
  return "/home/undemocracy/undata/"; 
}

/**
 * Takes the document string and returns the date
 */
function grab_date($document) {
	preg_match('/<span class="date">((.*?)-(.*?)-(.*?))<\/span>/', $document, $match);
//	return format_date($match[1]);
		return $match;
}

function grab_code($document) {
	preg_match('/<span class="code">(.*?)<\/span>/', $document, $match);

  $body = substr($match[1],0,1);

  if ($body == "A") {
    preg_match('/(.*?)\-(.*?)-(.*?)\.(.*[0-9])/',$match[1],$code);
    $code['body'] = $code[1];
    $code['session'] = $code[2];
    $code['type'] = $code[3];
    $code['meeting'] = $code[4];
  } elseif ($body == "S") {
	    preg_match('/(.*?)\-(.*?)-(.*[0-9])/',$match[1],$code);
	    $code['body'] = $code[1];
	    $code['type'] = $code[2];
	    $code['number'] = $code[3];
	  }
		return $code;
}

/**
 * Opens the file - and returns the string.  
 * This is done so that we can change the way files are opened if needed.
 */
function un_file_string($document) {
  return file_get_contents($document);  
}

/**
 * Implementation of hook_menu().
 */
function unfilenode_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'document',
      'title' => t('Document'),
      'access' => user_access('access content'),
      'callback' => 'document_page'
     );
   $items[] = array(
     'path' => 'image',
     'title' => t('image'),
     'access' => user_access('access content'),
     'callback' => 'image_page'
    );
     $items[] = array(
      'path' => 'test',
      'title' => 'Assembly files test page',
      'access' => user_access('access content'),
      'callback' => 'unfilenode_test',
     );
   $items[] = array(
    'path' => 'spokenby',
    'title' => 'Agenda items spoken by nation',
    'access' => user_access('access content'),
    'callback' => 'unfilenode_spokenby',
   );
 $items[] = array(
  'path' => 'agenda',
  'title' => 'Agenda',
  'access' => user_access('access content'),
  'callback' => 'agenda_page',
 );
  }   
  return $items;
}


/**
 * Page callbacks
 */


/**
 * /documents/ page calllback
 */
function document_page() {
  drupal_set_title("Document ".arg(1));
  $document = un_get_doc_path(arg(1));
  return theme('full_document', un_file_string($document)); 
}

/**
 * spokenby page calllback
 */
function unfilenode_spokenby() {
	$q = arg(1);
  $search = xapian_do_search('date:'.arg(3).' class:subheading nation:'.$q);
  $output = array();
  $output[] = $search->info;
  foreach($search->data as $result) {
  	$output[] = theme('agenda_list',$result);
  }
  return theme('item_list', array_reverse($output));
}

function agenda_page() {
	$search = xapian_do_search('document:'.arg(1).' id:'.arg(2).'');
//  $search->data['len'] = $search->data['full_doc_len'];

  	$output = theme('agenda_item',$search->data['0']);
  return implode(' ',$output);

}

/**
 * Theme functions
 */

	
/**
 * Strip out the undeeded tags from the document string and send the rest 
 * though to be themed on each div.
 */
function theme_full_document($document_string) {
  $document_string = preg_match('/<body>(.*?)<\/body>/s', $document_string, $matches);
  $document['text'] = $matches[1];
  $document['date'] = grab_date($document_string);
  $document['code'] = grab_code($document['text']);

  $document = theme("document_divs",$document);
  $document['text'] = implode("",$document['text']);
  return $document['text'];
}

function theme_document_segment($result) {
	$document = un_file_string(un_get_doc_path($result['file']));
  $document = substr($document, $result['offset'], $result['len']); 
  $document = theme("document_divs",$document);
  $document = implode("",$document);
  return $document;
}

function theme_agenda_list($result) {
	$path = un_get_doc_path($result['file']);
	$document = un_file_string($path);
	$date = grab_date($document);
  $document = substr($document, $result['offset'], $result['len']); 

  preg_match('/<div(.*)id="(.*?)"(.*)>/', $document, $id);
  preg_match('/<p(.*)id="(.*?)">(.*?)<\/p>/', $document, $match);
//print $document;
  if($id[5] == "yes") {
	$continued = " (continued)";
  }
  $links[] = l($date.' - '.strip_tags($match[3]).$continued,'agenda/'.$result['file'].'/'.$id[2]);
  return $links;
}

function theme_agenda_item($result) {
	$path = un_get_doc_path($result['file']);
	$document = un_file_string($path);
	$date = grab_date($document);
  $fulldocument = substr($document, $result['offset'], $result['full_doc_len']); 

  //grab the data for the boxes

  $heading = substr($document, $result['offset'], $result['len']); 

  preg_match('/<div class="subheading" id="(.*?)" agendanum="(.*?)" agendasess="(.*?)" agendacontinued="(.*?)">/s',$heading,$agenda_info);
  $fulldocument = preg_replace('/<div class="subheading" id="(.*?)" agendanum="(.*?)" agendasess="(.*?)" agendacontinued="(.*?)">/s', '<div class="subheading" id="$1">', $fulldocument,$agenda_info);
  $agendabox[] = theme('agenda_item_box',$date,$agenda_info[2],$agenda_info[3],$agenda_info[4]);
  $fulldocument = theme("document_divs",$fulldocument);
  return array_merge($agendabox,$fulldocument);
}
/*
 * Split a given string in to an array of all the divs with a class (boldline etc)
 * and run a theme function on them before adding them back in to the same formation
 */

function theme_agenda_item_box($date,$agenda_num,$session,$yes) {
	
	$search = xapian_do_search('agenda:'.$agenda_num.'s'.$session);
  $output = array();
  foreach($search->data as $result) {

  	$output[] = theme('agenda_list',$result);
  }

  $output = theme('item_list', array_reverse($output));

	return '<div class="agenda_box">'.$output.'</div>';
}


function theme_document_divs($document) {
  preg_match_all('/<div class="(assembly-chairs|heading|subheading|italicline-tookchair|italicline|spoken|recvote|boldline-agenda|subheading)" id="(.*?)">(.*?)<\/div>/s', $document['text'], $matches);
  foreach ($matches[0] as $i => $match) {
    $class = $matches[1][$i];


    //Add the # links
    $link = '';
    $match = preg_replace('/<p(.*?)id="(.*?)">(.*?)<\/p>/','<p$1id="$2">$3<a href="/link/'.$document['code'][0].'/$2">#</a></p>',$match);

    $stripe = $i % 2 ? 'even' : 'odd';
    $match = preg_replace('/<div class="(.*?)"(.*?)>/i','<div class="$1 '. $stripe.'"$2>',$match);

    /* Not used uet, but this can be used to theme different div classes
    switch ($class) {
      case "boldline":
      $match = theme('unfile_boldline', $match);   
    }
    */
    
    $content[] = $match;
  }

  $document['text'] = $content;
  return $document;
}


/**
 * This is all test stuff
 */
function unfilenode_test() {
   $links[] = l('Everything said by the United states', 'search/nation/unitedstates');
   $links[] = l('Document A/60/PV.9', 'document/A-60-PV.9');
   $links[] = drupal_get_form('unfilenode_search_form', $form);
   return theme('item_list',$links);
}
 
function unfilenode_search_form() {
   $form['query'] = array(
     '#type' => 'textfield',
     '#description' => "Examples: Blair, Nuclear, Climate change",
     );
   $form['search']['submit'] = array(
     '#type' => 'submit', 
     '#value' => 'Search',
     );
   return $form;
}

function unfilenode_search_form_submit($form_id, $form) {
   return 'search/' . $form['query'];
}

function unfilenode_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('un keyword search');
    return $blocks;
  } else if ($op == 'view') {
     switch($delta) {
       case 0:
         $block['subject'] = t('Search');
         $block['content'] = drupal_get_form(unfilenode_search_form,$form);
         return $block;
     }
   }
}

function image_page() {
	return '<img src="http://staging.undemocracy.com/shistogram/'.arg(1).'" /> ';
}



// junk - keeping for now

//  strip everything not in the html body
//      $contents = preg_replace('/<html.*<body>(.*?)<\\/body>.*/s', '$1', $contents);

			#get the document code
//			preg_match('/<span class="code">(.*?)<\\/span>/', $contents, $matches);
//			$code = $matches[1];

			#get the document date
//			preg_match('/<span class="date">(.*?)<\\/span>/', $contents, $matches);
//			$date = strtotime($matches[1]);
//			$date = date('jS M Y',$date);

      #Add stripe info and remove any text outside of the offset and length
//      $stripe = $i % 2 ? 'even' : 'odd';
//      $contents = '<div class="'.$stripe.'">'.substr($contents, $result['offset'], $result['len'])."</div>"; 
//      $contents = substr($contents, $result['offset'], $result['len']); 
 //     $data .= "<div class=\"$stripe\">".substr($contents, $result['offset'], $result['len'])."</div>\n\n"; 
      #Format the information about the speaker
//      $contents = preg_replace('/<h3 class="speaker">.*<span class="name">(.*?)<\\/span>.*<span class="nation">(.*?)<\\/span>.*<\\/h3>/s', '<h3 class="speaker">'.$date.'<br /> Spoken by <span class="name">$1</span> of <span class="nation"><a href="/members/$2">$2</a></span></h3>', $contents);

 			#Add links to paragraphs
//			$contents = preg_replace('/<p id="(.*?)">(.*?)<\\/p>/s', '<p id="$1">$2<a href="/link/'.$code.'/$1" title="link to this">#</a></p>', $contents);
//      preg_match('/<span class="nation">(.*?)<\\/span>/ims',$data, $matches);
//      preg_replace('/<span class="nation">(.*?)<\\/span>/ims', '<span class="nation">' . format_state('1') . '</span>',$data);
//      print_r($matches);
//      $data =  preg_replace('/<span(.*?)class="(.*?)speaker(.*?)"(.*?)>(.*?)<\\/span>/ixsm', '<span$1class="$2speaker$3"$4>'.$matches[1].'<br />'.l($matches[2], 'members/'.$matches[2]).'</span>', $data);

      # Fix up links to PDF files
//      $contents = preg_replace('/<a href="\\.\\.\\/pdf\\/([^"]+)">/', '<a href="'.base_path().'/pdf/$1">', $contents);

