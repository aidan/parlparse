<?php
# vim:set filetype=php:
# vim:sw=2:ts=2:et

/**
 * Implementation of hook_menu().
 */
function unfilenode_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/unfilenode',
      'title' => t('UN file settings'),
      'access' => user_access('administer unfiles'),   
      'callback' => 'unfilenode_settings'
     );
     $items[] = array(
     'path' => 'admin/settings/unfilenode/settings',
     'title' => 'Settings',
     'type' => MENU_DEFAULT_LOCAL_TASK,
     'weight' => '-10',
     );
     $items[] = array(
      'path' => 'document',
      'title' => t('Assembly'),
      'access' => user_access('access content'),
      'callback' => 'document_page'
     );
     $items[] = array(
      'path' => 'test', 
      'title' => 'Assembly files test page',
      'access' => user_access('access content'),
      'callback' => 'unfilenode_test',
     );    
  }
  return $items;
}

/**
 *  Module functions
 */
function unfilenode_settings_form() {
  $form['path'] = array(
    '#type' => textfield,
    '#title' => 'Path to files',
    '#default_value' => variable_get('unfiles_path', '/path/to/files'),
    '#description' => "The full path to the HTML files made by UNparse, including trailing slash"
  );

  $form['submit'] = array(
    '#type' => submit,
    '#title' => 'Save',
    '#value' => 'Save',
  );
  return $form;
} 

function unfilenode_settings() {
  $output = drupal_get_form('unfilenode_settings_form', $form);
  return $output;
}

function unfilenode_settings_validate($form_id, $form) {
  if (!file_exists($form['path'])) {
    form_set_error('', t('Could not find folder '. $form['path']));
  }
}

function unfilenode_settings_form_submit($form_id, $form) {
  variable_set('unfiles_path', $form['path']);
  print_r($form);
die();
}

function unfilenode_test() {
  $links[] = l('Everything said by the United states', 'assembly/spokenby/nation/unitedstates');
  $links[] = l('Document A/60/PV.9', 'assembly/document/A-60-PV.9');
  $links[] = drupal_get_form('unfilenode_search_form', $form);
  return theme('item_list',$links);
}
function unfilenode_search_form() {
  $form['query'] = array(
    '#type' => 'textfield',
    '#description' => "Examples: Blair, Nuclear, Climate change",
    );
  $form['search']['submit'] = array(
    '#type' => 'submit', 
    '#value' => 'Search',
    );
  return $form;

}

function unfilenode_search_form_submit($form_id, $form) {
  return 'assembly/word/' . $form['query'];
}


function unfilenode_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('un keyword search');
    return $blocks;
  } else if ($op == 'view') {
    switch($delta) {
      case 0:
        $block['subject'] = t('Search');
        $block['content'] = drupal_get_form(unfilenode_search_form,$form);
        return $block;
    }
  }
}



function document_page() {
  $document = arg(1);
    drupal_add_css(drupal_get_path('module', 'unfilenode').'/unview.css');
    return theme('document', xapian_do_search("document:".$document)); 
}

function theme_document($search) {
  $path = "/home/undemocracy/undata/"; 
  $file = $search->data['0']['file'];
  #display information about the xapian query.
  $data = "<!-- Search: $search->info -->";
  if ($search->data) {
      $contents = file_get_contents($path . $file);
      return format_html($contents);
      
  }
}

function format_html($contents) {







  return $contents;
}




      #strip everything not in the html body
//      $contents = preg_replace('/<html.*<body>(.*?)<\\/body>.*/s', '$1', $contents);

			#get the document code
//			preg_match('/<span class="code">(.*?)<\\/span>/', $contents, $matches);
//			$code = $matches[1];

			#get the document date
//			preg_match('/<span class="date">(.*?)<\\/span>/', $contents, $matches);
//			$date = strtotime($matches[1]);
//			$date = date('jS M Y',$date);

      #Add stripe info and remove any text outside of the offset and length
//      $stripe = $i % 2 ? 'even' : 'odd';
//      $contents = '<div class="'.$stripe.'">'.substr($contents, $result['offset'], $result['len'])."</div>"; 
//      $contents = substr($contents, $result['offset'], $result['len']); 
 //     $data .= "<div class=\"$stripe\">".substr($contents, $result['offset'], $result['len'])."</div>\n\n"; 
      #Format the information about the speaker
//      $contents = preg_replace('/<h3 class="speaker">.*<span class="name">(.*?)<\\/span>.*<span class="nation">(.*?)<\\/span>.*<\\/h3>/s', '<h3 class="speaker">'.$date.'<br /> Spoken by <span class="name">$1</span> of <span class="nation"><a href="/members/$2">$2</a></span></h3>', $contents);

 			#Add links to paragraphs
//			$contents = preg_replace('/<p id="(.*?)">(.*?)<\\/p>/s', '<p id="$1">$2<a href="/link/'.$code.'/$1" title="link to this">#</a></p>', $contents);
//      preg_match('/<span class="nation">(.*?)<\\/span>/ims',$data, $matches);
//      preg_replace('/<span class="nation">(.*?)<\\/span>/ims', '<span class="nation">' . format_state('1') . '</span>',$data);
//      print_r($matches);
//      $data =  preg_replace('/<span(.*?)class="(.*?)speaker(.*?)"(.*?)>(.*?)<\\/span>/ixsm', '<span$1class="$2speaker$3"$4>'.$matches[1].'<br />'.l($matches[2], 'members/'.$matches[2]).'</span>', $data);

      # Fix up links to PDF files
//      $contents = preg_replace('/<a href="\\.\\.\\/pdf\\/([^"]+)">/', '<a href="'.base_path().'/pdf/$1">', $contents);
