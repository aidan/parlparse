<?php
# vim:set filetype=php:
# vim:sw=2:ts=2:et

function un_get_doc_path($id) {
  $path = undata_path();
  $path = $path . "html/" . $id . ".html";
  return $path;
}

function undata_path() {
  return "/home/undemocracy/undata/"; 
}

/**
 * Implementation of hook_menu().
 */
function unfilenode_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'document',
      'title' => t('Document'),
      'access' => user_access('access content'),
      'callback' => 'document_page'
     );
     $items[] = array(
      'path' => 'test',
      'title' => 'Assembly files test page',
      'access' => user_access('access content'),
      'callback' => 'unfilenode_test',
     );
  }   
  return $items;
}

/**
 * /documents/ page calllback
 */
function document_page() {
  drupal_set_title("Document ".arg(1));
  $document = un_get_doc_path(arg(1));
  return theme('full_document', un_file_string($document)); 
}

function un_file_string($document) {
  return file_get_contents($document);  
}


/**
 * Theme functions
 */


/**
 * Strip out the undeeded tags from the document string and send the rest 
 * though to be themed on each div.
 */
function theme_full_document($document) {
  $document = preg_match('/<body>(.*)<span class="date">(.*?)<\/span> <span class="time">(.*?)<\/span>\n<\/div>(.*?)<\/body>/s', $document, $matches);
  $document = "<h3>On $matches[2] at $matches[3]</h3>";
  $document .= $matches[4];
  $document = theme("full_document_divs",$document);
  $document = implode("",$document);
  return $document;
}

/*
 * Split a given string in to an array of all the divs with a class (boldline etc)
 * and run a theme function on them before adding them back in to the same formation
 */
function theme_full_document_divs($document) {
  preg_match_all('/<div class="(assembly-chairs|boldline|italicline-tookchair|italicline|spoken|recvote)" id="(.*?)">(.*?)<\/div>/s', $document, $matches);
  foreach ($matches[0] as $i => $match) {
    $class = $matches[1][$i];
    $stripe = $i % 2 ? 'even' : 'odd';
    $match = preg_replace('/<div class="(.*?)"(.*?)>/i','<div class="$1 '. $stripe.'"$2>',$match);

    /* Not used uet, but this can be used to theme different div classes
    switch ($class) {
      case "boldline":
      $match = theme('unfile_boldline', $match);   
    }
    */
    
    $content[] = $match;
  }
  return $content;
}


/**
 * This is all test stuff
 */
function unfilenode_test() {
   $links[] = l('Everything said by the United states', 'assembly/spokenby/nation/unitedstates');
   $links[] = l('Document A/60/PV.9', 'document/A-60-PV.9');
   $links[] = drupal_get_form('unfilenode_search_form', $form);
   return theme('item_list',$links);
}
 
function unfilenode_search_form() {
   $form['query'] = array(
     '#type' => 'textfield',
     '#description' => "Examples: Blair, Nuclear, Climate change",
     );
   $form['search']['submit'] = array(
     '#type' => 'submit', 
     '#value' => 'Search',
     );
   return $form;
}

function unfilenode_search_form_submit($form_id, $form) {
   return 'assembly/word/' . $form['query'];
}

function unfilenode_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('un keyword search');
    return $blocks;
  } else if ($op == 'view') {
     switch($delta) {
       case 0:
         $block['subject'] = t('Search');
         $block['content'] = drupal_get_form(unfilenode_search_form,$form);
         return $block;
     }
   }
}





// junk - keeping for now

//  strip everything not in the html body
//      $contents = preg_replace('/<html.*<body>(.*?)<\\/body>.*/s', '$1', $contents);

			#get the document code
//			preg_match('/<span class="code">(.*?)<\\/span>/', $contents, $matches);
//			$code = $matches[1];

			#get the document date
//			preg_match('/<span class="date">(.*?)<\\/span>/', $contents, $matches);
//			$date = strtotime($matches[1]);
//			$date = date('jS M Y',$date);

      #Add stripe info and remove any text outside of the offset and length
//      $stripe = $i % 2 ? 'even' : 'odd';
//      $contents = '<div class="'.$stripe.'">'.substr($contents, $result['offset'], $result['len'])."</div>"; 
//      $contents = substr($contents, $result['offset'], $result['len']); 
 //     $data .= "<div class=\"$stripe\">".substr($contents, $result['offset'], $result['len'])."</div>\n\n"; 
      #Format the information about the speaker
//      $contents = preg_replace('/<h3 class="speaker">.*<span class="name">(.*?)<\\/span>.*<span class="nation">(.*?)<\\/span>.*<\\/h3>/s', '<h3 class="speaker">'.$date.'<br /> Spoken by <span class="name">$1</span> of <span class="nation"><a href="/members/$2">$2</a></span></h3>', $contents);

 			#Add links to paragraphs
//			$contents = preg_replace('/<p id="(.*?)">(.*?)<\\/p>/s', '<p id="$1">$2<a href="/link/'.$code.'/$1" title="link to this">#</a></p>', $contents);
//      preg_match('/<span class="nation">(.*?)<\\/span>/ims',$data, $matches);
//      preg_replace('/<span class="nation">(.*?)<\\/span>/ims', '<span class="nation">' . format_state('1') . '</span>',$data);
//      print_r($matches);
//      $data =  preg_replace('/<span(.*?)class="(.*?)speaker(.*?)"(.*?)>(.*?)<\\/span>/ixsm', '<span$1class="$2speaker$3"$4>'.$matches[1].'<br />'.l($matches[2], 'members/'.$matches[2]).'</span>', $data);

      # Fix up links to PDF files
//      $contents = preg_replace('/<a href="\\.\\.\\/pdf\\/([^"]+)">/', '<a href="'.base_path().'/pdf/$1">', $contents);

