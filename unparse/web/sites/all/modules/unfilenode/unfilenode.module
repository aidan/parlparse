<?php
# vim:set filetype=php:
# vim:sw=2:ts=2:et


/**
 * Format the path to a file, based on the document id
 */
function un_get_doc_path($id = null) {
	if ($id) {
    $path = undata_path();
    $path = $path . "html/" . $id . ".html";
    return $path;
  }
}

/**
 * The path to the undata folder
 */
function undata_path() {
  return "/home/undemocracy/undata/"; 
}

/**
 * Takes the document string and returns the date
 */
function grab_date($document) {
	preg_match('/<span class="date">((.*?)-(.*?)-(.*?))<\/span>/', $document, $match);
	return $match;
}

function grab_code($document) {
	preg_match('/<span class="code">(.*?)<\/span>/', $document, $match);
  $body = substr($match[1],0,1);

  if ($body == "A") {
    preg_match('/(.*?)\-(.*?)-(.*?)\.(.*[0-9])/',$match[1],$code);
    $code['body'] = $code[1];
    $code['session'] = $code[2];
    $code['type'] = $code[3];
    $code['meeting'] = $code[4];
  } elseif ($body == "S") {
	  preg_match('/(.*?)\-(.*?)-(.*[0-9])/',$match[1],$code);
	  $code['body'] = $code[1];
	  $code['type'] = $code[2];
	  $code['number'] = $code[3];
	}
		return $code;
}

function grab_title($result) {
  $document = un_file_string(un_get_doc_path($result['file']));
  $code = grab_code($document);
  $date = grab_date($document);

  preg_match_all('/<div class="(subheading|boldline-indent)"(.*?)id="('.$result['heading'].'.*?)"(.*?)>(.*?)<\/div>/s',$document,$heading);    
  preg_match_all('/<p(.*?)id="(.*?)">(.*?)<\/p>/',$heading[5][count($heading[5])-1],$match);	

  $title['heading_id'] = $heading[3][count($heading[3])-1];  
  $title['document'] = $code[0];
  $title['date'] = $date[1];
  $titles = $match[count($match)-1];
  $title['title'] = $titles[count($titles)-1];
  $title['block'] = $result['heading'];

  return $title;
}

/**
 * Opens the file - and returns the string.  
 * This is done so that we can change the way files are opened if needed.
 */
function un_file_string($document) {
  return file_get_contents($document);  
}

/**
 * Implementation of hook_menu().
 */
function unfilenode_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'document',
      'title' => t('Document'),
      'access' => user_access('access content'),
      'callback' => 'document_page'
    );
    $items[] = array(
      'path' => 'image',
      'title' => t('image'),
      'access' => user_access('access content'),
      'callback' => 'image_page'
    );
    $items[] = array(
      'path' => 'test',
      'title' => 'Assembly files test page',
      'access' => user_access('access content'),
      'callback' => 'unfilenode_test',
    );
    $items[] = array(
      'path' => 'spokenby',
      'title' => 'Agenda items spoken by nation',
      'access' => user_access('access content'),
      'callback' => 'unfilenode_spokenby',
    );
  }   
  return $items;
}


/**
 * Page callbacks
 */


/**
 * /documents/ page calllback
 */
function document_page() {
  drupal_set_title("Document ".arg(1));
  $document = un_get_doc_path(arg(1));
  return theme('full_document', un_file_string($document)); 
}

/**
 * spokenby page calllback
 */
function unfilenode_spokenby() {
	$q = arg(1);
  $search = xapian_do_search('date:'.arg(3).' class:subheading nation:'.$q);
  $output = array();
  $output[] = $search->info;
  foreach($search->data as $result) {
  	$output[] = theme('agenda_list',$result);
  }
  return theme('item_list', array_reverse($output));
}


/**
 * Theme functions
 */

	
/**
 * Strip out the undeeded tags from the document string and send the rest 
 * though to be themed on each div.
 */
function theme_full_document($document_string) {
  $document_string = preg_match('/<body>(.*?)<\/body>/s', $document_string, $matches);
  $document['text'] = $matches[1];
  $document['date'] = grab_date($document_string);
  $document['code'] = grab_code($document['text']);

  $document = theme("document_divs",$document);
  $document['text'] = implode("",$document['text']);
  return $document['text'];
}

function theme_document_segment($result) {
	$document['text'] = un_file_string(un_get_doc_path($result['file']));
  $document['date'] = grab_date($document['text']);
  $document['code'] = grab_code($document['text']);

  $len = $result['full_doc_len'] ? $result['full_doc_len'] : $result['len'];

  $document['text'] = substr($document['text'], $result['offset'], $len); 

  $document = theme("document_divs",$document);
 return implode("\n",$document['text']);

}


/*
 * Split a given string in to an array of all the divs with a class (boldline etc)
 * and run a theme function on them before adding them back in to the same formation
 */
 /*
  * takes a document array in the form of:
  * document['text'] = the text of the slice.  Can be any part of a document.
  * document['date'] = the array made by grab_date()
  * document['code'] = the array made by grab_code()
  */
 
function theme_document_divs($document) {
  preg_match_all('/<div class="(assembly-chairs|heading|subheading|italicline-tookchair|italicline|spoken|recvote|boldline-agenda|subheading)" id="(.*?)">(.*?)<\/div>/s', $document['text'], $matches);


  foreach ($matches[0] as $key => $match) {
    $class = $matches[1][$key];

    //Add the # links
    $link = '';
    $match = preg_replace('/<p(.*?)id="(.*?)">(.*?)<\/p>/','<span class="hashlink"><a href="/link/'.$document['code'][0].'/$2">#</a></span><p$1id="$2">$3</p>',$match);

    $match = fix_links($match);
    $stripe = $i % 2 ? 'even' : 'odd';
    $match = preg_replace('/<div class="(.*?)"(.*?)>/i','<div class="$1 '. $stripe.'"$2>',$match);


    /* used to theme different div classes */
	  switch ($class) {
      case "subheading":
        if (preg_match('/<div.*agendanum="(.*?)".*>/', $match, $headings)) {
	       $match = preg_replace('/<div(.*?)agendanum=".*"(.*?)>/', '<div$1$2>', $match);
         $match = theme('agenda_item_box', $headings[1]) . "\n" . $match;   
        }
      break;
      case "spoken":
         // name
         preg_match('/<span class="name">(.*?)<\/span>/', $match, $speaker);
 	       $speaker[0] = str_replace('-','&ndash;',$speaker[0]);
 	       $match = preg_replace('/<span class="name">(.*?)<\/span>/', $speaker[0], $match);

         // nation
         preg_match('/<span class="nation">(.*?)<\/span>/', $match, $nation);
 	       $img = '<img src="/images/flags/png/100/Flag_of_' . str_replace(' ','_', $nation[1]).'.png" />';
         $nation_url = '<a href="/members/'.strtolower(str_replace(' ','', $nation[1])).'">'.$img.$nation[0].'</a>';
 	       $match = preg_replace('/<span class="nation">(.*?)<\/span>/', $nation_url, $match);

         // language
 	       $match = preg_replace('/<span class="language">(.*?)<\/span>/', '<!--Spoken in $1 -->', $match);


      break;
    }
    
    $content[] = $match;
  }
  $document['text'] = $content;
  return $document;
}


// returns an array of titles from a xapian search object
function theme_titles($results) {
  if ($results->data) {
	  foreach($results->data as $i => $result) {
	  	$title = grab_title($result); 

	    if ($title['title'] && $title['document'] != $document) {
		    $titles[] = '<li>'.$title['date'].' - <a href="/agenda/'.$title['document'].'/'.$title['heading_id'].'#'.$title['block'].'">'.$title['title'].'</a></li>';
		    $document = $title['document'];
	  	}
	  }
	  return $titles;
  }
}

function fix_links($text) {
	// Fix the links to the pdf files
  $text = preg_replace('/<a href="..\/pdf\/(.*?).pdf"(.*?)class="(pdf|nolink)(.*?)">(.*?)<\/a>/','<a href="/pdfinfo/$1"$2class="$3$4">$5</a>',$text);

	// Fix the links to the html files
  $text = preg_replace('/<a href="..\/html\/(.*?).html"(.*?)>(.*?)<\/a>/','<a href="/document/$1"$2>$3</a>',$text);

  return $text;	
}





























/**
 * This is all test stuff
 */
function unfilenode_test() {
   $links[] = l('Everything said by the United states', 'search/nation/unitedstates');
   $links[] = l('Document A/60/PV.9', 'document/A-60-PV.9');
   $links[] = drupal_get_form('unfilenode_search_form', $form);
   return theme('item_list',$links);
}
 
function unfilenode_search_form() {
   $form['query'] = array(
     '#type' => 'textfield',
     '#size' => 20,
     );
   $form['search']['submit'] = array(
     '#type' => 'submit', 
     '#value' => 'Search',
     );
   return $form;
}

function unfilenode_search_form_submit($form_id, $form) {
   return 'search/' . $form['query'];
}

function unfilenode_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('un keyword search');
    return $blocks;
  } else if ($op == 'view') {
     switch($delta) {
       case 0:
         $block['subject'] = t('Search');
         $block['content'] = drupal_get_form(unfilenode_search_form,$form);
         return $block;
     }
   }
}

function image_page() {
	return '<img src="http://staging.undemocracy.com/shistogram/'.arg(1).'" /> ';
}







// oold agenda stuff



// function theme_agenda_item($result) {
//  $path = un_get_doc_path($result['file']);
//  $document = un_file_string($path);
//  $fulldocument['date'] = grab_date($document);
//  $fulldocument['code'] = grab_code($document); 
//   $fulldocument['text'] = substr($document, $result['offset'], $result['full_doc_len']); 
// 
//   //grab the data for the boxes
//   $heading = substr($document, $result['offset'], $result['len']); 
//   preg_match('/<div class="subheading" id="(.*?)" agendanum="(.*?)"/s',$heading,$agenda_info);
//   $fulldocument['text'] = preg_replace('/<div class="subheading" id="(.*?)" agendanum="(.*?)">/s', '<div class="subheading" id="$1">', $fulldocument['text'],$agenda_info2);
//   $agenda_info[2] = split(',',$agenda_info[2]);
//   foreach ($agenda_info[2] as $item){
//     if($item !=""){$agendabox[] = theme('agenda_item_box',$date,$item);}
//   }
//   $fulldocument = theme("document_divs",$fulldocument);
//   return array_merge($agendabox,$fulldocument['text']);
// }






/* old agenda stuff */

// function theme_agenda_item_box($date,$agenda_num) {
//  // 
//  // $search = xapian_do_search('agenda:'.$agenda_num);
//  //   $output = array();
//  //   foreach($search->data as $result) {
//  //    $output[] = theme('agenda_list',$result);
//  //   }
//  //   $output = theme('item_list', array_reverse($output));
//  // return '<div class="agenda_box">'.$output.'</div>';
// }


// function agenda_page() {
//   $search = xapian_do_search('document:'.arg(1).' id:'.arg(2).'');
//   $output = theme('agenda_item',$search->data['0']);
//   return implode(' ',$output);
// }
// function theme_agenda_list($result) {
//  $path = un_get_doc_path($result['file']);
//  $document = un_file_string($path);
//  $date = grab_date($document);
//  $document = substr($document, $result['offset'], $result['len']); 
//  
//  preg_match('/<div(.*)id="(.*?)"(.*)>/', $document, $id);
//  preg_match('/<p(.*)id="(.*?)">(.*?)<\/p>/', $document, $match);
// 
//   if($id[5] == "yes") {
//    $continued = " (continued)";
//   }
//   $links[] = l($date['1'].' - '.strip_tags($match[3]).$continued,'agenda/'.$result['file'].'/'.$id[2]);
//   return $links;
// }
