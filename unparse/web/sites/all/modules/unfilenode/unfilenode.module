<?php
# vim:set filetype=php:
# vim:sw=2:ts=2:et:nowrap

/**
 * Implementation of hook_help().
 */
function unfilenode_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Deals with the files made by unparse.');
  }
}

/**
 * Implementation of hook_menu().
 */
function unfilenode_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/unfilenode',
      'title' => t('UN file settings'),
      'access' => user_access('administer unfiles'),   
      'callback' => 'unfilenode_settings'
     );
     $items[] = array(
     'path' => 'admin/settings/unfilenode/settings',
     'title' => 'Settings',
     'type' => MENU_DEFAULT_LOCAL_TASK,
     'weight' => '-10',
     );
     $items[] = array(
      'path' => 'assembly',
      'title' => t('Assembly'),
      'access' => user_access('access content'),
      'callback' => 'assembly_page'
     );
     $items[] = array(
      'path' => 'test', 
      'title' => 'Assembly files test page',
      'access' => user_access('access content'),
      'callback' => 'unfilenode_test',
     );    
  }
  return $items;
}

/**
 *  Module functions
 */
function unfilenode_settings_form() {
  $form['path'] = array(
    '#type' => textfield,
    '#title' => 'Path to files',
    '#default_value' => variable_get('unfiles_path', '/path/to/files'),
    '#description' => "The full path to the HTML files made by UNparse, including trailing slash"
  );

  $form['submit'] = array(
    '#type' => submit,
    '#title' => 'Save',
    '#value' => 'Save',
  );
  return $form;
} 

function unfilenode_settings() {
  $output = drupal_get_form('unfilenode_settings_form', $form);
  return $output;
}

function unfilenode_settings_validate($form_id, $form) {
  if (!file_exists($form['path'])) {
    form_set_error('', t('Could not find folder '. $form['path']));
  }
}

function unfilenode_settings_form_submit($form_id, $form) {
  variable_set('unfiles_path', $form['path']);
  print_r($form);
die();
}

function unfilenode_test() {
  $links[] = l('Everything said by the United states', 'assembly/spokenby/nation/unitedstates');
  $links[] = l('Document A/60/PV.9', 'assembly/document/A-60-PV.9');
  $links[] = drupal_get_form('unfilenode_search_form', $form);
  return theme('item_list',$links);
}
function unfilenode_search_form() {
  $form['search'] = array(
    '#title' => 'Keyword search', 
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#collapsed' => true,
    );
  $form['search']['query'] = array(
    '#type' => 'textfield',
    '#default_value' => 'Blair',
    );
  $form['search']['submit'] = array(
    '#type' => 'submit', 
    '#value' => 'Search',
    );
  return $form;

}

function unfilenode_search_form_submit($form_id, $form) {
  return 'assembly/word/' . $form['query'];
}
 
function assembly_page() {
  $op = arg(1);
  drupal_add_css(drupal_get_path('module', 'unfilenode').'/unview.css');
  switch ($op) {
    case 'spokenby':
      return theme('assemblyfile', xapian_do_search(arg(2).":".arg(3).' '.arg(4)));
    case 'document': 
      return theme('assemblyfile', xapian_do_search(arg(1).":".arg(2)));
    case 'word':
      return theme('assemblyfile', xapian_do_search(arg(2)));
  }
}

function theme_assemblyfile($search) {
  $path = variable_get('xapian_undatapath', '/path/to/files');
  $data = "<h2>{$search->info}</h2>";
  if ($search->data) {
    foreach ($search->data as $i => $result) {
      $contents = file_get_contents($path . $result['file']);
      $contents .= preg_replace('/<html.*<body>(.*?)<\\/body>.*/s', '$1', $contents);
      $stripe = $i % 2 ? 'even' : 'odd';
      $data .= "<div class=\"$stripe\">".substr($contents, $result['offset'], $result['len'])."</div>"; 
    }
  }
  return $data;
}


